// Generated by Ktorfit
package service.api

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.*
import de.jensklingenberg.ktorfit.http.*
import dto.GetAllDto
import dto.customers.CustomerDTO
import model.users.Customer

public class _ApiUsersImpl(
  private val client: KtorfitClient,
) : ApiUsers {
  public override suspend fun getAll(page: Int, perPage: Int): List<CustomerDTO> {
    val requestData = RequestData(method="GET",
        relativeUrl="users/",
        queries = listOf(QueryData("page",page,false,QueryType.QUERY),
            QueryData("per_page",perPage,false,QueryType.QUERY)),
        returnTypeData=TypeData("kotlin.collections.List",listOf(TypeData("dto.customers.CustomerDTO"))))
            

    return client.suspendRequest<List<CustomerDTO>, CustomerDTO>(requestData)!!
  }

  public override suspend fun getById(id: Int): CustomerDTO {
    val requestData = RequestData(method="GET",
        relativeUrl="users/{id}",
        returnTypeData=TypeData("dto.customers.CustomerDTO"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<CustomerDTO, CustomerDTO>(requestData)!!
  }

  public override suspend fun findByEmail(email: String): List<CustomerDTO>? {
    val requestData = RequestData(method="GET",
        relativeUrl="users",
        queries = listOf(QueryData("email",email,false,QueryType.QUERY)),
        returnTypeData=TypeData("kotlin.collections.List?",listOf(TypeData("dto.customers.CustomerDTO"))))
            

    return client.suspendRequest<List<CustomerDTO>?, CustomerDTO>(requestData)
  }

  public override suspend fun create(user: CustomerDTO): CustomerDTO {
    val requestData = RequestData(method="POST",
        relativeUrl="users",
        bodyData = user,
        returnTypeData=TypeData("dto.customers.CustomerDTO")) 

    return client.suspendRequest<CustomerDTO, CustomerDTO>(requestData)!!
  }

  public override suspend fun update(id: Int, customer: CustomerDTO): Customer {
    val requestData = RequestData(method="PUT",
        relativeUrl="users/{id}",
        bodyData = customer,
        returnTypeData=TypeData("model.users.Customer"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<Customer, Customer>(requestData)!!
  }

  public override suspend fun delete(id: Int): Unit {
    val requestData = RequestData(method="DELETE",
        relativeUrl="users/{id}",
        returnTypeData=TypeData("kotlin.Unit"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<Unit, Unit>(requestData)!!
  }
}

public fun Ktorfit.createApiUsers(): ApiUsers = _ApiUsersImpl(KtorfitClient(this))
