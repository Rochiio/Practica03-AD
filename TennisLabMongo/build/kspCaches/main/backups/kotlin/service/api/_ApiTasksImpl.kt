// Generated by Ktorfit
package service.api

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.*
import de.jensklingenberg.ktorfit.http.*
import dto.TaskDTO

public class _ApiTasksImpl(
  private val client: KtorfitClient,
) : ApiTasks {
  public override suspend fun getAll(page: Int, perPage: Int): List<TaskDTO> {
    val requestData = RequestData(method="GET",
        relativeUrl="todos",
        queries = listOf(QueryData("page",page,false,QueryType.QUERY),
            QueryData("per_page",perPage,false,QueryType.QUERY)),
        returnTypeData=TypeData("kotlin.collections.List",listOf(TypeData("dto.TaskDTO")))) 

    return client.suspendRequest<List<TaskDTO>, TaskDTO>(requestData)!!
  }

  public override suspend fun getById(id: Int): TaskDTO? {
    val requestData = RequestData(method="GET",
        relativeUrl="todos/{id}",
        returnTypeData=TypeData("TaskDTO?"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<TaskDTO?, TaskDTO?>(requestData)
  }

  public override suspend fun getByUserId(userId: Int): TaskDTO? {
    val requestData = RequestData(method="GET",
        relativeUrl="todos/{userId}",
        returnTypeData=TypeData("TaskDTO?"),
        paths = listOf(PathData("userId","$userId",false))) 

    return client.suspendRequest<TaskDTO?, TaskDTO?>(requestData)
  }

  public override suspend fun create(task: TaskDTO): TaskDTO {
    val requestData = RequestData(method="POST",
        relativeUrl="todos",
        bodyData = task,
        returnTypeData=TypeData("dto.TaskDTO")) 

    return client.suspendRequest<TaskDTO, TaskDTO>(requestData)!!
  }

  public override suspend fun update(id: Int, task: TaskDTO): TaskDTO {
    val requestData = RequestData(method="PUT",
        relativeUrl="todos/{id}",
        bodyData = task,
        returnTypeData=TypeData("dto.TaskDTO"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<TaskDTO, TaskDTO>(requestData)!!
  }

  public override suspend fun delete(id: Int): Unit {
    val requestData = RequestData(method="DELETE",
        relativeUrl="todos/{id}",
        returnTypeData=TypeData("kotlin.Unit"),
        paths = listOf(PathData("id","$id",false))) 

    return client.suspendRequest<Unit, Unit>(requestData)!!
  }
}

public fun Ktorfit.createApiTasks(): ApiTasks = _ApiTasksImpl(KtorfitClient(this))
